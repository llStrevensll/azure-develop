azure cli
https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest

az login
az storage account list

---------
Powershell
Set-ExecutionPolicy RemoteSigned 
Install-Module -Name Az -AllowClobber -Scope CurrentUser
Import-Module Az -Verbose 

Connect-AzAccount

------
Create vm
Subscription
   - Resource group

instance details
 Virtual machine name
 Region
 Availability options
 Image
 Azure Spot instance
 Size

administrator account
 username
 password
 confirm password

inbound port rules
 public inbound ports
 select inbound ports RDP(3389)

Disk,
Networking,

So a subnet is again a logical separation of the address space of the virtual Network.
Then we have a public IP address, so the public IP address allows this virtual machine to be reachable 
from the Internet.
So let's say that you want to go ahead and connect to this virtual machine. will actually connect to this virtual
machine via the public IP address

Monitoring
 Boot diagnostics - on
 Diagnostic storage account - 

Advanced
Tags
Review - create

--
view all resources
=======
Connect RDP
 - Download RDP File

---
In vm
Server Manger - dashboard
 Add roles and features
    installation type: role-based or feature-based installation
    server selection: select a server from the server pool
    server roles: web server(iis)
       next , install

localhost

---
ip public donÂ´t working, for network security group
go onto the Networking sections
  add inbound security rule
      destination port ranges: 80
      protocol TCP

ip public refresh
============
Publishing an application from Visual Studio to a VM
vs:
publish
 azure virtual machines

azure portal:
 dns name - configure

configuration
 assigment: static
 DNS name label (demovm)

networking
 add inbound security rule
 port 8172
 TCP

vm:
Add roles and Features Wizard
  Web Server ISS
    Application Development
       ASP NET 4.7 - check
  Mangement tools
    ISS Management Tools
       Management Service - check
install

tools
 iis manager
   vm(demovm)
     management service
       enable remote connections  
     -apply
     -start

local server
  IE Enhanced Security Configuration: OFF

search in internet explorer
  Download Web Deploy v3.5

go again to vs
publish
 azure virtual machines - browse - select vm in azure portal
 edit - validate connection
 publish

Overview:
  1. Assign static IP and DNS name to Virtual Machine
  2. Open Port 8172 in Network Security Groups
  3. In Web Server Roles add
              Management Service and ASP.Net 4.7
  4. Install Web Deploy v 3.5
 
================================
Create linux vm 
port 22

connect with Putty
// This command is used to update the package index
sudo apt-get update

// This command will install the nginx web server
sudo apt-get install nginx

vm:
  Add inbound port rule
     Source: Service Tag
     Destination port range: 80
     Protocol: TCP

test ip public
-----
Accelerated networking
 Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance. This high-performance path bypasses the host from the data path, which reduces latency, jitter, 
 and CPU utilization for the most demanding network workloads on supported VM types. The following diagram illustrates how two VMs communicate with and without accelerated networking:
https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-powershell

=======================
Generalizing a Virtual Machine  -generate image of vm

Access to vm windows:
System32/Sysprep
   check Generalize
   Shutdown Options: Shutdown 

cloud shell
  deallocated - stop vm
  Stop-AzVM -ResourceGroupName azuredemo -Name demovm -Force

Azure Portal
  vm - overview
  option Capture
    create

Images
Select image - Create new vm
   open port 80 http
   boot diagnostics off

test ip public
================================================
Azure Resource Manager Template
This provides the obility to define your infrastructure as code
You create templates using JSON
This defines this infrastructure and configuration of the resources that need to be deployed

ej: create vm, storage account, virtual network

Resources: resources that need to be deployed
Variable: values that can be reused in the template
Parameters: can be used to provide values during the deployment phase
Outputs: values from the deployed serources

Azure portal
Template deployment - create
  Deploy a simple windows VM
     edit - to view json

-------------------------
Azure backup for vm
  use: Recovery Service vault     [Recovery Point]
       Backup Policy              [File Recovery, VM Recovery, Disk Recovery]
 
in vm
operations
 backup 
  create o edit a new policy
      backup policy
    enable backup
 
 backup now

Recovery Services Vault
  Backup items


But remember, this is pointing to our restore point.
It's not pointing to our virtual machine.
Just keep this in mind. so you can actually now go onto the drives and you can start recovering the files on a file by file basis.


===============================
Docker 
test in vm linux
sudo apt update
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
sudo apt update
sudo apt install docker-ce

sudo docker pull nginx:1.17.0
sudo docker images

sudo docker run --name sampleapp -p 80:80 -d nginx:1.17.0


add rule port 80 in vm

test ip public
------
deploy .net core in vm linux
can use linux with Nginx
        linux with Apache

sudo apt-get update
sudo apt-get install nginx

azure portal:
 add port 80


wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb

sudo dpkg -i packages-microsoft-prod.deb

sudo apt-get update

sudo apt-get install dotnet-sdk-3.1


*Use WinSCP to transfer files - folder publish 

donet coreproj.dll

cd /etc/nginx/sites-available
sudo chmod 667

nano default
location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		proxy_pass http://localhost:5000;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection keep-alive;
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;	
	}

sudo nginx -s reload

*cd var/www
*sudo chmod 667 html
*copy files publish\wwwroot\(css,js,lib,favicon.ico)  to nginx var/www/html

------
Containerizing

Dockerfile:
FROM mcr.microsoft.com/dotnet/core/sdk:3.1
WORKDIR /app
COPY  . .
ENV ASPNETCORE_URLS http://*:5000
EXPOSE 5000
ENTRYPOINT ["dotnet", "coreproj.dll"]


sudo docker build -t dotnetapp .
sudo docker run -d -p 5000:5000 dotnetapp

test ip public
------
ACR - Azure Container Registry
Azure Portal:
  Create Container Resgistry

vm linux:

curl -sL https://packages.microsoft.com/keys/microsoft.asc | \
    gpg --dearmor | \
    sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null

AZ_REPO=$(lsb_release -cs)
echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
    sudo tee /etc/apt/sources.list.d/azure-cli.list

sudo apt-get update

sudo apt-get install azure-cli

sudo az login

sudo az acr login --name appregistry2020

sudo docker tag dotnetapp appregistry2020.azurecr.io/dotnetapp

sudo docker push appregistry2020.azurecr.io/dotnetapp



-----
Azure Container Instances
Use Azure Container registry

port 5000
test ip public

----------------
---------------
Kubernetes
This is an open-source platform that is used to magning containerized workloads
Kubernetes is able to provide a DNS name to your containe


create cluster
you can use the interface or commands

cloud shell, powershell
// Here we will create a new resource group
az group create --name kubernetesgrp --location eastus

// Then we will create a new Kubernetes cluster
az aks create --resource-group kubernetesgrp --name democluster --node-count 1 --enable-addons monitoring --generate-ssh-keys

// We will then install the kubectl tool
az aks install-cli --install-location=./kubectl

// This allows kubectl to connect to the Kubernetes cluster
az aks get-credentials --resource-group kubernetesgrp --name democluster 

-------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx
        image: nginx:1.17.0
        ports:
        - containerPort: 80
----
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: nginx-app

kubectl apply -f app.yml

kubectl apply -f service.yml

kubectl get service nginx-service --watch

kubectl delete services nginx-service

---------------------
ACR - AKS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-image
        image: appregistry6000.azurecr.io/dotnetapp
        ports:
        - containerPort: 5000

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: LoadBalancer
  ports:
  - port: 5000
  selector:
    app: my-app

kubectl delete services nginx-service

kubectl delete deployment nginx-deployment

$AKS_RESOURCE_GROUP="kubernetesgrp"
$AKS_CLUSTER_NAME="democluster"
$ACR_RESOURCE_GROUP="demogrp1"
$ACR_NAME="appregistry6000"

//Use Service Principal
$CLIENT_ID=$(az aks show --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --query "servicePrincipalProfile.clientId" --output tsv)

$ACR_ID=$(az acr show --name $ACR_NAME --resource-group $ACR_RESOURCE_GROUP --query "id" --output tsv)

az role assignment create --assignee $CLIENT_ID --role acrpull --scope $ACR_ID

kubectl apply -f app.yml

kubectl apply -f service.yml

kubectl get service my-service --watch

=============================================
=============================================

Azure App Service (Saas)

App Service Plan
Free 60min per day
Shared 240 per day
https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans
Pricing tier (Free, Shared, Basic, Standard, Premium, PremiumV2, PremiumV3, Isolated)

---
Azure Portal 
Create Web App 
  Runtime Stack: ASP NET V4.7
  SO: Windows
 
 App Service Plan: Basic B1
 Enable Application Insights -no

VS:
 Publish
   App Service: Select existing
--------------
--------------
Azure Web App - Linux
   Runtime Stack: .net Core 3.1(LTS)
    SO: Windows

 App Service Plan: Standard1
  

VS:
 Publish
   App Service: Select existing

-------------
-------------
App Service
  Overview - Stop, Restart

Configuration
  Application Settings
  Connection Strings

Authentication/Authorization
   App Service Authentication - on
      AD
   Backup

   Scale up(App Service plan)
   Scale out(App Service plan)

   Networking
      VNet integration
      Hybrid connections
      Azure front door with web application firewall
      Azure CDN

---------
Web App - Docker container
Create web app
  Publish: Docker Container
  linux
  acr

----
App services logs
  Application logging
  Web server logging
  Detailed Error messages
  failed request tracing
  deployment logging

#note: use project- mvcapp
vs
publish project un app service

Monitoring
  App service logs
  level information
  webserverloggin: file system


azure poral -app service
deployment center 
  FTP - User Credentials
       username, pw

use WinSCP
  see logs

-------------------------
web app - publish from github
Github Extension for Visual Studio
login to github in vs

Add solution to source control
commit
commit stage
sync
publish to github

app service
 deployment center
   github 
     github actions

vs
other commit
push

refresh page

az appservice plan create --name "demoappplan2020" --resource-group "azuredemo" --sku Free
az webapp create --name "demoapp2050" --resource-group "azuredemo" --plan "demoappplan2020"
az webapp deployment source config --name "demoapp2050" --resource-group "azuredemo" --repo-url "https://github.com/alashro/WebAppNew" --branch master --manual-integration


-------------
azure cli
azure cloud shell
$gitrepo="https://github.com/alashro/demoapp1000"
az group create --location centralus --name staging-grp
az appservice plan create --name newappplan2000 --resource-group staging-grp --sku B1

az webapp create --name newapp2000 --resource-group staging-grp --plan newappplan2000 
az webapp deployment source config --name newapp2000 --resource-group staging-grp --repo-url $gitrepo --branch master --manual-integration

-------
Custom Domains
//godaddy
edit in provider domain (example:godaddy)
app service
Custom Domains
  copy IP address
  
  add custom domains
-------
SSL
TLS/SSL Settings
   Create App
   Service Managed Cerificate
Custom Domains
   Add binding
      choose certificate
      TLS/SSL: SNI SSL
-------
CORS: Cross-Origin Resource Sharing
Publish project webapi vs
Publish
  new - select existing
  publish

project consumer api
consume.html - ajax
Publish
  new - select existing
  publish

app service -webapi
  CORS
    enable
    allow origin: consumeapi.azurewebsite.net
-------
deployment slots
publish vs
scale up - production s1
deployment slots - add slot
swap

------
deployment slots power shell
//create variables that can be used in the PowerShell script. Here we are setting the location for the web application, 
the name of a new resource group and the name of the new Azure Web App
$location="Central US"
$resourcegrp="newgrp"
$webappname="demoapp4040"

// Next we issue the command to create a new resource group
New-AzResourceGroup -Name $resourcegrp -Location $location

// Next we issue the command to create a new App Service Plan
New-AzAppServicePlan -Name $webappname -Location $location -ResourceGroupName $resourcegrp -Tier Standard

// Next we issue the command to create a new Web App
New-AzWebApp -Name $webappname -Location $location -ResourceGroupName $resourcegrp -AppServicePlan $webappname

// Next we issue the command to create a new Web App deployment slot
New-AzWebAppSlot -Name $webappname -ResourceGroupName $resourcegrp -Slot "staging"

-----------------------
----------------------
.NetCore azure web app linux
cloud shell 
az group create -name linuxgroup --location "West Europe"
az appservice plan create --name demoplan --resource-group linuxgroup --sku B1 -ls-linux
az webapp create --resource-group linuxgroup --plan demoplan --name linuxapp2020 -- "DOTNETCORE|2.2" --deployment-local-git


https://dotnet.microsoft.com/download
cmd local
donet --version
mkdir coreapp
cd coreapp
dotnet new web
dotnet run

git add .
git commit -m ""

cloud shell
az webapp deployment user set --user-name demousr2020 --password DemoUsr@2020

git remote add azure https://demousr2020@linuxapp2020.scm.azurewebsites.net/linuxapp2020.git
git push azure master



